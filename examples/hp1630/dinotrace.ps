%!PS-Adobe-1.0
%%Title: /home/garlick/dinotrace.ps
%%Creator: Dinotrace 9.3a Encapsulated Postscript
%%CreationDate: Fri Oct 14 15:57:00 2005
%%Pages: 0
%%BoundingBox: 0 0 569 792
%%EndComments

save
% $Id$
% Contact wsnyder@wsnyder.org with any problems with this document
/MT {moveto} def		% define MT
/LT {lineto} def		% define LT
/STROKE {currentpoint stroke MT} def	% define STROKE saving point

/PAGESCALE      % (height width sigrf paper_height paper_width)
{ newpath
  /PG_WID exch def		% def PG_WID = 11 * 72
  /PG_HGT exch def		% def PG_HGT = 8.5 * 72
  /psigrf exch def		% signal rf time
  /xstart exch def		% xstart of DINOTRACE window
  /width exch def		% width of DINOTRACE window
  /height exch def		% height of DINOTRACE window
  /heightmul PG_HGT 50 sub height div def
  /YADJ { height exch sub heightmul mul 40 add } def
  /basewidth 0 def		% Prepare for sigwidth calc
  /hierwidth 0 def		% Prepare for sigwidth calc
  stroke /Times-Roman findfont 8 scalefont setfont
} def 

/EPSPHDR      % (st_end_time res date note file pagenum dtversion)
{ newpath			% clear current path
  pop pop pop pop pop pop pop
  1 setlinecap 1 setlinejoin 1 setlinewidth     % set line char
  /Times-Roman findfont 8 scalefont setfont
  } def

/EPSLHDR      % (st_end_time res date note file pagenum dtversion)
{ newpath			% clear current path
  90 rotate			% rotates to landscape
  0 PG_HGT neg translate	% translates so you can see the image
  pop pop pop pop pop pop pop
  1 setlinecap 1 setlinejoin 1 setlinewidth     % set line char
  /Times-Roman findfont 8 scalefont setfont
  } def

/PAGEHDR      % (st_end_time res date note file pagenum dtversion)
{ newpath			% clear current path
  90 rotate			% rotates to landscape
  0 PG_HGT neg translate	% translates so you can see the image

  %3 setlinewidth		% set the line width of the border
  %0 0 MT 0 PG_HGT LT PG_WID PG_HGT LT PG_WID 0 LT 0 0 LT stroke % draw bounding box

  /Helvetica-BoldOblique findfont 30 scalefont setfont % choose large font
  1 setlinecap 1 setlinejoin 1 setlinewidth	% set line char

  20 20 MT 20 string cvs true charpath stroke	% draw logo
  PG_WID 180 sub 20 MT
    20 string cvs true charpath stroke		% draw page number

  /Times-Roman findfont 10 scalefont setfont    % choose normal font
  1 setlinecap 1 setlinejoin 1 setlinewidth     % set line char

  /TPOS 
	250	
	1000 PG_WID lt {	% B-Size page?
		50 add
		} if
	def		% Define position for file info

  TPOS 40 MT (File: ) show 150 string cvs show
  TPOS 30 MT (Note: ) show 150 string cvs show
  TPOS 20 MT (Date: ) show 25 string cvs show
  TPOS 150 add 20 MT (Confidential) show
  PG_WID 300 sub 30 MT (Resolution: ) show 25 string cvs show
  PG_WID 300 sub 20 MT (Time: ) show 25 string cvs show
  stroke /Times-Roman findfont 8 scalefont setfont
  } def

/RIGHTSHOW	% (string) right justify the signal names
{ dup stringwidth pop	% get width of string
  0 exch sub		% subtract stringwidth
  0 rmoveto show	% adjust strating location of text and show
} def

/CENTERSHOW	% (string) center justify the signal names
{ dup stringwidth pop	% get width of string
  2 div 0 exch sub	% subtract stringwidth/2
  0 rmoveto show	% adjust starting location of text and show
} def

/FITCENTERSHOW	% (x y string) if string will fit vs last printing, show it centered
{ /v exch def
  /y exch def
  /x exch def
  v stringwidth pop 2 div	% get width of string
  x xc sub			% get width of bus
  lt {				% is string wid lt bus wid?
    x y MT v CENTERSHOW		% show value
    /xc 
        v stringwidth pop 2 div	% get width of string
	x add 3 add def		% define new ending point, leave some room
    } if
} def

/SIGMARGIN	% (hiername basename) set margin to max of this width or prev widths
{ stringwidth pop dup	% get width of base signal name
  basewidth gt {		% compare to current width
  /basewidth exch def	% set it
  } { pop } ifelse
 stringwidth pop dup	% get width of hier string
  hierwidth gt {	% compare to current width
  /hierwidth exch def	% set it
  } { pop } ifelse
} def

/SIGNAME	% (ymdpt hiername basename) draw a signal name
{ /basename exch def	% Base part of signal name
  /hiername exch def	% Hiearchy part of signal name
  /ymdpt exch YADJ def	% ymdpt - Midpoint of signame
  hierwidth ymdpt 3 sub MT	% move to right edge of .
  hiername RIGHTSHOW	% plot hiername to left
  hierwidth ymdpt 3 sub MT	% move to right edge of .
  basename show		% plot basename to right
} def

/XSCALESET	% set signal xscaling after all signals were margined
{ /hierwidth hierwidth 20 add def	% left margin creation
  /sigstart hierwidth basewidth add 10 add def	% space between signal and values
  /sigxscale PG_WID sigstart sub width xstart sub div def	% Scaling for signal section
  /XSCALE { sigxscale mul } def	% convert X screen to print coord
  /XADJ { xstart sub sigxscale mul sigstart add } def	% convert X screen to print coord
} def

/START_GRID	% (ytop ybot ylabel) start a signal's information
{ /ylabel exch YADJ def	% ylabel - Where to put label y coord
  /ybot exch YADJ def	% ybot - Bottom of grid line y coord
  /ytop exch YADJ def	% ytop - Top of grid line y coord
  /xc 0 XADJ def	% xc- current x coord for determining if fits
} def

/GRID		% (x label) make grid
{ /label exch def		% time label for grid
  /x exch XADJ def		% x coord of grid
  x ytop MT x ybot LT stroke	% draw grid line
  x ylabel label FITCENTERSHOW	% draw label
} def

/CSRU		% (x label) make user cursor
{ [] 0 setdash
  GRID
} def

/CSRA		% (x label) make auto cursor
{ [1 1] 0 setdash
  GRID
} def

/CURSOR_DELTA	% (x1 x2 y label) draw a delta line between two cursors
{ /label exch def		% time label for grid
  /y exch YADJ def		% y coord of cursor
  /xl exch XADJ def		% x coord of cursor 2 (earlier one)
  /xh exch XADJ def		% x coord of cursor 1 (later one)
  /xlh xh xl add 2 div def	% center point of lines
  label stringwidth pop	6 add	% get width of string
  xh xl sub			% get width of bus
  lt {				% is string wid lt bus wid?
    xlh 2 sub label stringwidth pop 2 div sub
    y MT xl y LT		% first half
    xlh y 3 sub MT label CENTERSHOW	% show value
    xlh 2 add label stringwidth pop 2 div add
    y MT xh y LT		% second half
    }
  {
    xl y MT xh y LT		% draw line, no time can fit 
    } ifelse
  stroke
} def

/START_SIG	% (ymdpt ytop ybot xstart) start a signal's information
{ /xl exch XADJ def	% xl - last/left x coord
  /ybot exch YADJ def	% ybot - Bottom of signal's y coord
  /ytop exch YADJ def	% ytop - Top of signal's y coord
  /ymdpt exch YADJ def	% ymdpt - Middle of signal's y coord
  /sigrf psigrf XSCALE def % sigrf scaled from page rise-fall
  stroke xl ymdpt MT
  /x xl def
} def

% State drawing routines:
%   Preserve last /x as /lx
%   Leave point at (xl,ymdpt)

/S0		% (x) low
{ /xl x def
  /x exch XADJ def
  xl sigrf add ybot LT	% \ 
  x sigrf sub ybot LT	% - 
  x ymdpt LT		% / 
  } def

/S1		% (x) high
{ /xl x def
  /x exch XADJ def
  xl ymdpt MT
  xl sigrf add ytop LT	% / 
  STROKE
  2 setlinewidth
  x sigrf sub ytop LT	% = 
  STROKE
  1 setlinewidth
  x ymdpt LT		% \ 
  } def

/SZ		% (x) Tristate
{ /xl x def
  /x exch XADJ def
  STROKE
  [1 1] 0 setdash
  x ymdpt LT	% .... 
  STROKE
  [] 0 setdash
  } def

/SB		% (x) bus
{ /xl x def
  /x exch XADJ def
  xl sigrf add ytop LT	% / 
  x sigrf sub ytop LT	% - 
  x ymdpt LT		% \ 
  x sigrf sub ybot LT	% / 
  xl sigrf add ybot LT	% - 
  xl ymdpt LT		% \ 
  x ymdpt MT
  } def

/SH		% (x) bus high
{ /xl x def
  /x exch XADJ def
  xl sigrf add ytop LT	% / 
  STROKE
  2 setlinewidth
  x sigrf sub ytop LT	% = 
  STROKE
  1 setlinewidth
  x ymdpt LT		% \ 
  x sigrf sub ybot LT	% / 
  xl sigrf add ybot LT	% \ 
  x ymdpt MT
  } def

/SU		% (x) Unknown
{ /xl x def
  /x exch XADJ def
  STROKE
  xl ymdpt MT
  xl sigrf add ytop LT	% / 
  x sigrf sub ytop LT	% - 
  x ymdpt LT		% \ 
  x sigrf sub ybot LT	% / 
  xl sigrf add ybot LT	% - 
  closepath		% \ 
  fill stroke
  x ymdpt MT
  } def

/SA		% (x pct_high) analog
{ /xl x def
  /pct exch def
  /x exch XADJ def
  ytop ybot sub   pct mul   ybot add   /ypct exch def
  xl sigrf add ypct LT	% / 
  x sigrf sub ypct LT	% - 
  } def

/SV	% (valstrg) draw bus value
{ /v exch def			% value as string
  v stringwidth pop		% get width of string
  x xl sub			% get width of bus
  lt {				% is string wid lt bus wid?
    xl x xl sub 2 div add	% calculate the mdpt
    v stringwidth pop 2 div sub	% calculate start location of text
    ymdpt 3 sub MT v show	% draw the bus value
    } if

  x ymdpt MT			% reset current point
  } def

/SN	% ( value fallback_value) draw bus waveform with decoded value, fallback if doesn't fit
{ /fallback exch def		% fallback string
  /v exch def			% convert to hex string
  v stringwidth pop		% get width of string
  x xl sub			% get width of bus
  lt {				% is string wid lt bus wid?
    xl x xl sub 2 div add	% calculate the mdpt
    v stringwidth pop 2 div sub	% calculate start location of text
    ymdpt 3 sub MT v show	% draw the bus value
    } 
  { 
    fallback stringwidth pop	% get width of string
    x xl sub			% get width of bus
    lt {			% is string wid lt bus wid?
      xl x xl sub 2 div add	% calculate the mdpt
      fallback stringwidth pop 2 div sub	% calculate start location of text
      ymdpt 3 sub MT fallback show	% draw the bus value
      } if 
    } ifelse

  x ymdpt MT			% reset current point
  } def



526 782 57 2 612 777 PAGESCALE
() (CLK   ) SIGMARGIN
() (DIV_2 ) SIGMARGIN
() (DIV_4 ) SIGMARGIN
() (DIV_8 ) SIGMARGIN
() (DIV_16) SIGMARGIN
XSCALESET

% Beginning of page 0 - 0
(0-720 ns) (720 ns/page) (Fri Oct 14 15:57:00 2005) () (timing.tra) () (Dinotrace 9.3a) EPSLHDR
35 () (CLK   ) SIGNAME
50 () (DIV_2 ) SIGNAME
65 () (DIV_4 ) SIGNAME
80 () (DIV_8 ) SIGNAME
95 () (DIV_16) SIGNAME
35 30 40 57 START_SIG
67 S1
97 S0
127 S1
157 S0
187 S1
217 S0
247 S1
287 S0
317 S1
347 S0
377 S1
407 S0
437 S1
467 S0
497 S1
537 S0
567 S1
597 S0
627 S1
657 S0
687 S1
717 S0
747 S1
777 S0
stroke
50 45 55 57 START_SIG
107 S1
167 S0
237 S1
297 S0
357 S1
417 S0
487 S1
547 S0
607 S1
667 S0
737 S1
777 S0
stroke
65 60 70 57 START_SIG
107 S0
237 S1
357 S0
487 S1
607 S0
737 S1
777 S0
stroke
80 75 85 57 START_SIG
237 S0
487 S1
737 S0
777 S1
stroke
95 90 100 57 START_SIG
487 S0
777 S1
stroke

[1 3] 0 setdash
15 522 14 START_GRID
87 (30) GRID
207 (150) GRID
327 (270) GRID
447 (390) GRID
567 (510) GRID
687 (630) GRID

23 511 522 START_GRID
stroke
restore
